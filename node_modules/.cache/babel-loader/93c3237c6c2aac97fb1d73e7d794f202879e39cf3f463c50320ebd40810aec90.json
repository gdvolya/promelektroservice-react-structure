{"ast":null,"code":"// src/firebase.js\nimport{initializeApp}from\"firebase/app\";import{getFirestore}from\"firebase/firestore\";import{getMessaging,getToken,onMessage}from\"firebase/messaging\";const firebaseConfig={apiKey:\"AIzaSyADB_57F2kKA7HcxLnLpcqzr3ooi2sszMc\",authDomain:\"promelectroservice-cb179.firebaseapp.com\",projectId:\"promelectroservice-cb179\",storageBucket:\"promelectroservice-cb179.firebasestorage.app\",messagingSenderId:\"938821085661\",appId:\"1:938821085661:web:1eeb590842370bd23f2e34\"};const app=initializeApp(firebaseConfig);const db=getFirestore(app);// Настройка push-уведомлений\nconst messaging=getMessaging(app);const vapidKey=\"BE6mx-nmfkaM-RJmDBA2rJVNYkQRX9Qayj4-zgSz4AM-IJFssiPlAA0XUAaGmlznUUDIpvkksUzzJbgS0glRKj8\";// Получение токена\nconst requestForToken=async()=>{try{const currentToken=await getToken(messaging,{vapidKey});if(currentToken){console.log(\"FCM Token:\",currentToken);}else{console.log(\"Нет регистрационного токена. Разрешите уведомления.\");}}catch(err){console.error(\"Ошибка получения токена:\",err);}};// Обработка входящих сообщений\nconst onMessageListener=()=>new Promise(resolve=>{onMessage(messaging,payload=>{resolve(payload);});});export{db,requestForToken,onMessageListener};","map":{"version":3,"names":["initializeApp","getFirestore","getMessaging","getToken","onMessage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","db","messaging","vapidKey","requestForToken","currentToken","console","log","err","error","onMessageListener","Promise","resolve","payload"],"sources":["C:/Users/User/Desktop/promelektroservice-react-structure/src/firebase.js"],"sourcesContent":["// src/firebase.js\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getMessaging, getToken, onMessage } from \"firebase/messaging\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyADB_57F2kKA7HcxLnLpcqzr3ooi2sszMc\",\r\n  authDomain: \"promelectroservice-cb179.firebaseapp.com\",\r\n  projectId: \"promelectroservice-cb179\",\r\n  storageBucket: \"promelectroservice-cb179.firebasestorage.app\",\r\n  messagingSenderId: \"938821085661\",\r\n  appId: \"1:938821085661:web:1eeb590842370bd23f2e34\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\n\r\n// Настройка push-уведомлений\r\nconst messaging = getMessaging(app);\r\nconst vapidKey = \"BE6mx-nmfkaM-RJmDBA2rJVNYkQRX9Qayj4-zgSz4AM-IJFssiPlAA0XUAaGmlznUUDIpvkksUzzJbgS0glRKj8\";\r\n\r\n// Получение токена\r\nconst requestForToken = async () => {\r\n  try {\r\n    const currentToken = await getToken(messaging, { vapidKey });\r\n    if (currentToken) {\r\n      console.log(\"FCM Token:\", currentToken);\r\n    } else {\r\n      console.log(\"Нет регистрационного токена. Разрешите уведомления.\");\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Ошибка получения токена:\", err);\r\n  }\r\n};\r\n\r\n// Обработка входящих сообщений\r\nconst onMessageListener = () =>\r\n  new Promise((resolve) => {\r\n    onMessage(messaging, (payload) => {\r\n      resolve(payload);\r\n    });\r\n  });\r\n\r\nexport { db, requestForToken, onMessageListener };\r\n"],"mappings":"AAAA;AACA,OAASA,aAAa,KAAQ,cAAc,CAC5C,OAASC,YAAY,KAAQ,oBAAoB,CACjD,OAASC,YAAY,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,oBAAoB,CAEtE,KAAM,CAAAC,cAAc,CAAG,CACrBC,MAAM,CAAE,yCAAyC,CACjDC,UAAU,CAAE,0CAA0C,CACtDC,SAAS,CAAE,0BAA0B,CACrCC,aAAa,CAAE,8CAA8C,CAC7DC,iBAAiB,CAAE,cAAc,CACjCC,KAAK,CAAE,2CACT,CAAC,CAED,KAAM,CAAAC,GAAG,CAAGZ,aAAa,CAACK,cAAc,CAAC,CACzC,KAAM,CAAAQ,EAAE,CAAGZ,YAAY,CAACW,GAAG,CAAC,CAE5B;AACA,KAAM,CAAAE,SAAS,CAAGZ,YAAY,CAACU,GAAG,CAAC,CACnC,KAAM,CAAAG,QAAQ,CAAG,yFAAyF,CAE1G;AACA,KAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACF,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAd,QAAQ,CAACW,SAAS,CAAE,CAAEC,QAAS,CAAC,CAAC,CAC5D,GAAIE,YAAY,CAAE,CAChBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEF,YAAY,CAAC,CACzC,CAAC,IAAM,CACLC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CACpE,CACF,CAAE,MAAOC,GAAG,CAAE,CACZF,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAED,GAAG,CAAC,CAChD,CACF,CAAC,CAED;AACA,KAAM,CAAAE,iBAAiB,CAAGA,CAAA,GACxB,GAAI,CAAAC,OAAO,CAAEC,OAAO,EAAK,CACvBpB,SAAS,CAACU,SAAS,CAAGW,OAAO,EAAK,CAChCD,OAAO,CAACC,OAAO,CAAC,CAClB,CAAC,CAAC,CACJ,CAAC,CAAC,CAEJ,OAASZ,EAAE,CAAEG,eAAe,CAAEM,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}