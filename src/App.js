import React, { Suspense, lazy, useEffect, useCallback, useMemo } from "react";
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from "react-router-dom";
import { HelmetProvider, Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import ErrorBoundary from "./components/ErrorBoundary";
import logoPng from "./img/logo.png";
import logoWebp from "./img/logo.webp";
import "./css/style.css";
import "./i18n";

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
const HomePage = lazy(() => import("./pages/HomePage.jsx"));
const PortfolioPage = lazy(() => import("./pages/PortfolioPage.jsx"));
const ContactsPage = lazy(() => import("./pages/ContactsPage.jsx"));
const ReviewsPage = lazy(() => import("./pages/ReviewsPage.jsx"));
const PricingPage = lazy(() => import("./pages/PricingPage.jsx"));
const AdminPanel = lazy(() => import("./pages/AdminPanel.jsx"));
const NotFoundPage = lazy(() => import("./pages/NotFoundPage.jsx"));
const ProjectDetailPage = lazy(() => import("./pages/ProjectDetailPage.jsx"));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —è–∑—ã–∫–æ–≤
const languages = ["uk", "en", "ru"];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function AppContent() {
  const { t, i18n } = useTranslation();
  const location = useLocation();

  const changeLanguage = useCallback(
    (lng) => {
      if (i18n.language !== lng) {
        i18n.changeLanguage(lng);
        localStorage.setItem("i18nextLng", lng);
      }
    },
    [i18n]
  );

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AOS —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (location.pathname === "/") {
      import("aos").then((AOS) => {
        AOS.init({ once: true, duration: 700 });
      });
    }
  }, [location.pathname]);

  const navItems = useMemo(() => [
    { path: "/", label: t("nav.home") },
    { path: "/portfolio", label: t("nav.portfolio") },
    { path: "/reviews", label: t("nav.reviews") },
    { path: "/pricing", label: t("nav.pricing") },
    { path: "/contacts", label: t("nav.contacts") },
  ], [t]);

  const getPageMeta = useCallback((pathname) => {
    const metaKey = pathname.split("/")[1] || "home";
    const projectMatch = pathname.match(/\/portfolio\/([^/]+)/);
    if (projectMatch) {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      return {
        title: t("meta.projectTitle", { projectName: projectMatch[1] }),
        description: t("meta.projectDescription", { projectName: projectMatch[1] }),
      };
    }

    return {
      title: t(`meta.${metaKey}Title`),
      description: t(`meta.${metaKey}Description`),
      url: `https://promelektroservice.vercel.app/${i18n.language}/${pathname.substring(1)}`,
      canonical: `https://promelektroservice.vercel.app/${pathname}`,
    };
  }, [t, i18n.language]);

  const { title, description, url, canonical } = getPageMeta(location.pathname);

  return (
    <>
      <Helmet>
        <html lang={i18n.language} />
        <title>{title}</title>
        <meta name="description" content={description} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:url" content={url} />
        <link rel="canonical" href={canonical} />
        {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ hreflang –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        {languages.map(lng => (
          <link
            key={lng}
            rel="alternate"
            hrefLang={lng}
            href={`https://promelektroservice.vercel.app/${lng}${location.pathname}`}
          />
        ))}
      </Helmet>
      
      <a href="#main-content" className="skip-link">
        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      </a>

      <div className="app-wrapper">
        <header className="site-header" role="banner">
          <div className="header-container">
            <Link to="/" aria-label={t("nav.home")} className="logo-link">
              <picture>
                <source srcSet={logoWebp} type="image/webp" />
                <img
                  src={logoPng}
                  alt="–õ–æ–≥–æ—Ç–∏–ø –ü—Ä–æ–º–ï–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤—ñ—Å"
                  className="logo-left"
                  width={60}
                  height={60}
                  loading="eager"
                  fetchpriority="high"
                  decoding="async"
                />
              </picture>
            </Link>

            <nav aria-label={t("nav.mainMenu") || "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"}>
              <ul className="nav-menu centered" role="menubar">
                {navItems.map(({ path, label }) => {
                  const isActive = location.pathname === path;
                  return (
                    <li key={path} role="none">
                      <Link
                        to={path}
                        className={isActive ? "active" : ""}
                        aria-current={isActive ? "page" : undefined}
                        role="menuitem"
                        tabIndex={0}
                      >
                        {label}
                      </Link>
                    </li>
                  );
                })}
              </ul>
            </nav>
          </div>
        </header>

        <main
          className="main-content"
          role="main"
          id="main-content"
          tabIndex={-1}
        >
          <ErrorBoundary>
            <Suspense
              fallback={
                <div className="loading-spinner" role="status" aria-live="polite">
                  <div className="spinner" />
                  <p>{t("loading") || "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."}</p>
                </div>
              }
            >
              <Routes>
                <Route path="/" element={<HomePage />} />
                <Route path="/portfolio" element={<PortfolioPage />} />
                <Route path="/portfolio/:projectId" element={<ProjectDetailPage />} />
                <Route path="/reviews" element={<ReviewsPage />} />
                <Route path="/pricing" element={<PricingPage />} />
                <Route path="/contacts" element={<ContactsPage />} />
                <Route path="/admin" element={<AdminPanel enableExport />} />
                <Route path="*" element={<NotFoundPage />} />
              </Routes>
            </Suspense>
          </ErrorBoundary>
        </main>

        <footer
          className="footer minimized-footer sticky-footer"
          role="contentinfo"
        >
          <div className="footer-top">
            <a href="tel:+380666229776" className="footer-link" aria-label={t("phoneLabel") || "–¢–µ–ª–µ—Ñ–æ–Ω"}>
              üìû +380666229776
            </a>
            <a
              href="mailto:info@promelektroservice.com"
              className="footer-link"
              aria-label={t("emailLabel") || "Email"}
            >
              ‚úâÔ∏è info@promelektroservice.com
            </a>
          </div>

          <div
            className="lang-switcher"
            role="group"
            aria-label={t("langSelectorLabel") || "–í–∏–±—ñ—Ä –º–æ–≤–∏"}
          >
            {languages.map((lng) => {
              const labels = { uk: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", en: "English", ru: "–†—É—Å—Å–∫–∏–π" };
              const flags = { uk: "üá∫üá¶", en: "üá¨üáß", ru: "üá∑üá∫" };
              const isActive = i18n.language === lng;
              return (
                <button
                  key={lng}
                  onClick={() => changeLanguage(lng)}
                  title={labels[lng]}
                  aria-label={labels[lng]}
                  className={`lang-btn${isActive ? " active" : ""}`}
                  type="button"
                >
                  {flags[lng]}
                </button>
              );
            })}
          </div>

          <p>¬© {new Date().getFullYear()} Promelektroservice. {t("footer.rights")}</p>
        </footer>
      </div>
    </>
  );
}

// –û–±—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è Router –∏ HelmetProvider
export default function App() {
  return (
    <HelmetProvider>
      <Router>
        <AppContent />
      </Router>
    </HelmetProvider>
  );
}