import React, { useState, useEffect, useCallback } from "react";
import { Helmet } from "react-helmet-async";
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  getDoc,
  updateDoc,
  query,
  orderBy,
  limit,
  startAfter,
} from "firebase/firestore";
import * as XLSX from "xlsx";
import {
  FaTrash,
  FaDownload,
  FaSearch,
  FaSignInAlt,
  FaSort,
  FaSortUp,
  FaSortDown,
  FaChevronLeft,
  FaChevronRight,
} from "react-icons/fa";
import "../styles/AdminPanel.css";
import Modal from "./Modal"; // Assuming this component exists

let db = null;
const PAGE_SIZE = 10;

// Custom hook for fetching data
const useFetchSubmissions = () => {
  const [data, setData] = useState({ submissions: [], views: 0 });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  const fetchData = useCallback(async () => {
    if (!db) return;
    setLoading(true);
    try {
      const [subsSnapshot, viewsDoc] = await Promise.all([
        getDocs(query(collection(db, "submissions"), orderBy("createdAt", "desc"))),
        getDoc(doc(db, "views", "home")),
      ]);

      const fetchedSubmissions = subsSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate() || null,
      }));

      setData({
        submissions: fetchedSubmissions,
        views: viewsDoc.exists() ? viewsDoc.data().count : 0,
      });
      setError("");
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", err);
      setError("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return { ...data, loading, error, refresh: fetchData };
};

const AdminPanel = ({ enableExport = true }) => {
  const { submissions, views, loading, error, refresh } = useFetchSubmissions();
  const [password, setPassword] = useState("");
  const [authError, setAuthError] = useState("");
  const [authenticated, setAuthenticated] = useState(
    sessionStorage.getItem("authenticated") === "true"
  );
  const [searchTerm, setSearchTerm] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [submissionToDelete, setSubmissionToDelete] = useState(null);
  const [sortBy, setSortBy] = useState("createdAt");
  const [sortOrder, setSortOrder] = useState("desc");
  const [currentPage, setCurrentPage] = useState(0);

  useEffect(() => {
    if (authenticated) {
      import("../firebaseLazy").then(({ db: loadedDb }) => {
        db = loadedDb;
        refresh();
      });
    }
  }, [authenticated, refresh]);

  const handleLogin = async () => {
    const adminPass = import.meta.env.REACT_APP_ADMIN_PASS?.trim();
    if (password.trim() === adminPass) {
      setAuthenticated(true);
      sessionStorage.setItem("authenticated", "true");
      setPassword("");
      setAuthError("");
    } else {
      setAuthError("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.");
    }
  };

  const confirmDelete = (submission) => {
    setSubmissionToDelete(submission);
    setShowModal(true);
  };

  const handleDelete = async () => {
    if (!db || !submissionToDelete) return;
    try {
      await deleteDoc(doc(db, "submissions", submissionToDelete.id));
      refresh();
      setShowModal(false);
      setSubmissionToDelete(null);
    } catch (err) {
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏.");
      console.error(err);
    }
  };

  const handleUpdateStatus = async (id, newStatus) => {
    if (!db) return;
    const confirmed = window.confirm(
      `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "${newStatus}"?`
    );
    if (!confirmed) return;
    try {
      await updateDoc(doc(db, "submissions", id), {
        status: newStatus,
      });
      refresh();
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:", err);
    }
  };

  const handleSort = (key) => {
    if (sortBy === key) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      setSortBy(key);
      setSortOrder("asc");
    }
  };

  const getSortedSubmissions = () => {
    const sorted = [...submissions].sort((a, b) => {
      const aValue = a[sortBy] || "";
      const bValue = b[sortBy] || "";

      if (aValue < bValue) return sortOrder === "asc" ? -1 : 1;
      if (aValue > bValue) return sortOrder === "asc" ? 1 : -1;
      return 0;
    });

    return sorted;
  };

  const getSortIcon = (key) => {
    if (sortBy !== key) return <FaSort />;
    return sortOrder === "asc" ? <FaSortUp /> : <FaSortDown />;
  };

  const exportToExcel = () => {
    const sheet = XLSX.utils.json_to_sheet(
      submissions.map(({ id, createdAt, ...rest }) => ({
        ...rest,
        –î–∞—Ç–∞: createdAt ? createdAt.toLocaleString("uk-UA") : "‚Äî",
      }))
    );
    const book = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(book, sheet, "–ó–∞—è–≤–∫–∏");
    XLSX.writeFile(book, "submissions.xlsx");
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") handleLogin();
  };

  const filteredSubmissions = submissions.filter(
    ({ name, email, phone, message }) =>
      name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      phone?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      message?.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  const sortedSubmissions = getSortedSubmissions();

  const paginatedSubmissions = sortedSubmissions.slice(
    currentPage * PAGE_SIZE,
    (currentPage + 1) * PAGE_SIZE
  );

  const totalPages = Math.ceil(sortedSubmissions.length / PAGE_SIZE);

  if (!authenticated) {
    return (
      <main className="admin-login">
        <Helmet>
          <title>–í—Ö—ñ–¥ ‚Äî –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</title>
        </Helmet>
        <h2>–í—Ö—ñ–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ</h2>
        <input
          type="password"
          placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          onKeyDown={handleKeyDown}
        />
        <button onClick={handleLogin}>
          <FaSignInAlt /> –£–≤—ñ–π—Ç–∏
        </button>
        {authError && <p className="error-text">{authError}</p>}
      </main>
    );
  }

  return (
    <main className="admin-panel">
      <Helmet>
        <title>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å ‚Äî –ü—Ä–æ–º–ï–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤—ñ—Å</title>
      </Helmet>
      <header className="admin-header">
        <h1>üìã –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</h1>
        <div>
          {views !== null && (
            <p>
              üëÅ –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π: <strong>{views}</strong>
            </p>
          )}
        </div>
      </header>

      <div className="admin-controls">
        <div className="search-container">
          <FaSearch className="search-icon" />
          <input
            type="text"
            placeholder="–ü–æ—à—É–∫ –ø–æ –∑–∞—è–≤–∫–∞—Ö..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        {enableExport && submissions.length > 0 && (
          <button onClick={exportToExcel} className="export-btn">
            <FaDownload /> –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ Excel
          </button>
        )}
      </div>

      {loading && <p>‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>}
      {error && <p className="error-text">‚ùå {error}</p>}
      
      {!loading && sortedSubmissions.length === 0 ? (
        <p>–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –ø–æ—à—É–∫—É.</p>
      ) : (
        <>
          <table className="admin-table">
            <thead>
              <tr>
                <th onClick={() => handleSort("name")}>
                  –Ü–º‚Äô—è {getSortIcon("name")}
                </th>
                <th onClick={() => handleSort("email")}>
                  Email {getSortIcon("email")}
                </th>
                <th onClick={() => handleSort("phone")}>
                  –¢–µ–ª–µ—Ñ–æ–Ω {getSortIcon("phone")}
                </th>
                <th>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</th>
                <th onClick={() => handleSort("createdAt")}>
                  –î–∞—Ç–∞ {getSortIcon("createdAt")}
                </th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–î—ñ—ó</th>
              </tr>
            </thead>
            <tbody>
              {paginatedSubmissions.map(
                ({ id, name, email, phone, message, createdAt, status }) => (
                  <tr key={id}>
                    <td>{name}</td>
                    <td>{email}</td>
                    <td>{phone}</td>
                    <td>
                      <div className="message-cell">{message}</div>
                    </td>
                    <td>
                      {createdAt
                        ? new Date(createdAt).toLocaleString("uk-UA")
                        : "‚Äî"}
                    </td>
                    <td>
                      <select
                        value={status || "New"}
                        onChange={(e) => handleUpdateStatus(id, e.target.value)}
                      >
                        <option value="New">–ù–æ–≤–∞</option>
                        <option value="In Progress">–í —Ä–æ–±–æ—Ç—ñ</option>
                        <option value="Completed">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                        <option value="Canceled">–°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
                      </select>
                    </td>
                    <td>
                      <button
                        onClick={() => confirmDelete({ id, name })}
                        className="delete-btn"
                      >
                        <FaTrash /> –í–∏–¥–∞–ª–∏—Ç–∏
                      </button>
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>

          {totalPages > 1 && (
            <div className="pagination">
              <button
                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 0))}
                disabled={currentPage === 0}
              >
                <FaChevronLeft />
              </button>
              <span>
                –°—Ç–æ—Ä—ñ–Ω–∫–∞ {currentPage + 1} –∑ {totalPages}
              </span>
              <button
                onClick={() => setCurrentPage((prev) => prev + 1)}
                disabled={currentPage === totalPages - 1}
              >
                <FaChevronRight />
              </button>
            </div>
          )}
        </>
      )}

      {showModal && (
        <Modal
          title="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
          onClose={() => setShowModal(false)}
        >
          <p>
            –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É –≤—ñ–¥{" "}
            <strong>{submissionToDelete?.name}</strong>?
          </p>
          <div className="modal-actions">
            <button onClick={handleDelete} className="modal-confirm-btn">
              –í–∏–¥–∞–ª–∏—Ç–∏
            </button>
            <button
              onClick={() => setShowModal(false)}
              className="modal-cancel-btn"
            >
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </button>
          </div>
        </Modal>
      )}
    </main>
  );
};

export default AdminPanel;