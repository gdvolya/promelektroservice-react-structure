import React, { useState, useEffect, useCallback, useRef } from "react";
import { Helmet } from "react-helmet-async";
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  getDoc,
} from "firebase/firestore";
import * as XLSX from "xlsx";
import { FaTrash, FaDownload, FaSearch, FaSignInAlt } from "react-icons/fa";
import "../styles/AdminPanel.css";

const AdminPanel = ({ enableExport = true }) => {
  const [submissions, setSubmissions] = useState([]);
  const [views, setViews] = useState(null);
  const [loading, setLoading] = useState(true);
  const [password, setPassword] = useState("");
  const [authenticated, setAuthenticated] = useState(false);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const dbRef = useRef(null);

  const fetchData = useCallback(async () => {
    const db = dbRef.current;
    if (!db) return;
    setLoading(true);
    try {
      const [subsSnapshot, viewsDoc] = await Promise.all([
        getDocs(collection(db, "submissions")),
        getDoc(doc(db, "views", "home")),
      ]);
      setSubmissions(
        subsSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
          createdAt: doc.data().createdAt || null,
        }))
      );
      setViews(viewsDoc.exists() ? viewsDoc.data().count : 0);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (authenticated && !dbRef.current) {
      import("../firebaseLazy").then(({ db: loadedDb }) => {
        dbRef.current = loadedDb;
        fetchData();
      });
    } else if (authenticated && dbRef.current) {
      fetchData();
    }
  }, [authenticated, fetchData]);

  const handleDelete = async (id) => {
    const db = dbRef.current;
    if (!db) return;
    const confirmed = window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?");
    if (!confirmed) return;
    try {
      await deleteDoc(doc(db, "submissions", id));
      setSubmissions((prev) => prev.filter((s) => s.id !== id));
    } catch (err) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.");
      console.error(err);
    }
  };

  const exportToExcel = () => {
    const sheet = XLSX.utils.json_to_sheet(
      submissions.map(({ id, ...rest }) => rest)
    );
    const book = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(book, sheet, "–ó–∞—è–≤–∫–∏");
    XLSX.writeFile(book, "submissions.xlsx");
  };

  const handleLogin = () => {
    const adminPass = process.env.REACT_APP_ADMIN_PASS;

    if (!adminPass) {
      setError("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω –≤ .env.local –∏–ª–∏ —Å—Ä–µ–¥–µ.");
      return;
    }

    if (password.trim() !== adminPass.trim()) {
      setError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
      return;
    }

    setTimeout(() => {
      setAuthenticated(true);
      setPassword("");
      setError("");
    }, 300);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") handleLogin();
  };

  const filteredSubmissions = submissions.filter(
    ({ name, email, phone, message }) =>
      name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      phone?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      message?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (!authenticated) {
    return (
      <main className="admin-login">
        <Helmet>
          <title>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî –ü—Ä–æ–º–ï–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤—ñ—Å</title>
        </Helmet>
        <h2>üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>
        <input
          type="password"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          onKeyDown={handleKeyDown}
          autoFocus
        />
        <button onClick={handleLogin} disabled={!password.trim()}>
          <FaSignInAlt /> –í–æ–π—Ç–∏
        </button>
        {error && <p className="error-text">{error}</p>}
      </main>
    );
  }

  return (
    <main className="admin-panel">
      <Helmet>
        <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî –ü—Ä–æ–º–ï–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤—ñ—Å</title>
      </Helmet>
      <header className="admin-header">
        <h1>üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
        <div>
          {views !== null && (
            <p>
              üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π: <strong>{views}</strong>
            </p>
          )}
        </div>
      </header>
      <div className="admin-controls">
        <input
          type="text"
          placeholder="üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-input"
        />
        {enableExport && submissions.length > 0 && (
          <button onClick={exportToExcel} className="export-btn">
            <FaDownload /> –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel
          </button>
        )}
      </div>

      {loading && <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>}
      {error && <p className="error-text">{error}</p>}

      {filteredSubmissions.length === 0 && !loading ? (
        <p>–ù–µ—Ç –∑–∞—è–≤–æ–∫.</p>
      ) : (
        <table className="admin-table">
          <thead>
            <tr>
              <th>–ò–º—è</th>
              <th>Email</th>
              <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th>–°–æ–æ–±—â–µ–Ω–∏–µ</th>
              <th>–î–∞—Ç–∞</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {filteredSubmissions.map(
              ({ id, name, email, phone, message, createdAt }) => (
                <tr key={id}>
                  <td>{name}</td>
                  <td>{email}</td>
                  <td>{phone}</td>
                  <td>{message}</td>
                  <td>
                    {createdAt?.seconds
                      ? new Date(createdAt.seconds * 1000).toLocaleString("uk-UA")
                      : "‚Äî"}
                  </td>
                  <td>
                    <button
                      onClick={() => handleDelete(id)}
                      className="delete-btn"
                    >
                      <FaTrash /> –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </td>
                </tr>
              )
            )}
          </tbody>
        </table>
      )}

      <div className="extra-links">
        <a
          href="/report/index.html"
          target="_blank"
          rel="noopener noreferrer"
          className="report-link"
        >
          üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Lighthouse –æ—Ç—á–µ—Ç—ã
        </a>
      </div>
    </main>
  );
};

export default AdminPanel;