import React, { useState, useEffect, useCallback, useRef } from "react";
import { Helmet } from "react-helmet-async";
import {
  collection,
  deleteDoc,
  doc,
  updateDoc,
  query,
  orderBy,
  onSnapshot,
} from "firebase/firestore";
import * as XLSX from "xlsx";
import {
  FaTrash,
  FaDownload,
  FaSignInAlt,
  FaSignOutAlt,
  FaSort,
  FaSortUp,
  FaSortDown,
} from "react-icons/fa";
import "../styles/AdminPanel.css";
import Modal from "./Modal";

// ‚úÖ –û–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –∫–ª–∞—Å—Å–∞–º–∏
const statusOptions = {
  new: { label: "üü° –ù–æ–≤–∞—è", className: "status-new" },
  "in-progress": { label: "üîµ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", className: "status-in-progress" },
  done: { label: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", className: "status-done" },
};

const AdminPanel = ({ enableExport = true }) => {
  const [submissions, setSubmissions] = useState([]);
  const [views, setViews] = useState(null);
  const [loading, setLoading] = useState(true);
  const [password, setPassword] = useState("");
  const [authenticated, setAuthenticated] = useState(false);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [sortConfig, setSortConfig] = useState({
    key: "createdAt",
    direction: "descending",
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [submissionToDelete, setSubmissionToDelete] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [submissionDetails, setSubmissionDetails] = useState(null);

  const dbRef = useRef(null);
  const prevSortConfig = useRef(null);

  const formatFirestoreTimestamp = useCallback((timestamp) => {
    if (!timestamp || !timestamp.seconds) return "‚Äî";
    const date = new Date(timestamp.seconds * 1000);
    return date.toLocaleString("uk-UA");
  }, []);

  // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é
  const handleLogin = useCallback(() => {
    const adminPass = process.env.REACT_APP_ADMIN_PASS;

    if (!adminPass) {
      setError("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.");
      return;
    }

    if (password.trim() !== adminPass.trim()) {
      setError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
      return;
    }

    setAuthenticated(true);
    setPassword("");
    setError("");
  }, [password]);

  const handleLogout = useCallback(() => {
    setAuthenticated(false);
    setViews(null);
    setSubmissions([]);
    dbRef.current = null;
  }, []);

  const handleKeyDown = useCallback(
    (e) => {
      if (e.key === "Enter") handleLogin();
    },
    [handleLogin]
  );

  // üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!authenticated) {
      setLoading(false);
      return;
    }

    if (
      prevSortConfig.current &&
      prevSortConfig.current.key === sortConfig.key &&
      prevSortConfig.current.direction === sortConfig.direction
    ) {
      return;
    }

    setLoading(true);
    prevSortConfig.current = sortConfig;

    let unsubscribeSubmissions;
    let unsubscribeViews;

    import("../firebaseLazy")
      .then(({ db: loadedDb }) => {
        dbRef.current = loadedDb;
        const db = dbRef.current;

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æcreatedAt –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –µ—Å–ª–∏
        // –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏, —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ –ø—É—Å—Ç–æ–π.
        const effectiveSortKey = sortConfig.key || "createdAt";
        const effectiveSortDirection =
          sortConfig.direction === "ascending" ? "asc" : "desc";

        const submissionsQuery = query(
          collection(db, "requests"),
          orderBy(effectiveSortKey, effectiveSortDirection)
        );

        unsubscribeSubmissions = onSnapshot(
          submissionsQuery,
          (snapshot) => {
            const fetchedSubmissions = snapshot.docs.map((doc) => ({
              id: doc.id,
              ...doc.data(),
              // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ createdAt –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
              createdAt: doc.data().createdAt || null,
            }));
            
            // ‚úÖ –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë.
            console.log("Fetched submissions:", fetchedSubmissions);

            setSubmissions(fetchedSubmissions);
            setLoading(false);
            setError("");
          },
          (err) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", err);
            setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫.");
            setLoading(false);
          }
        );

        const viewsDocRef = doc(db, "views", "home");
        unsubscribeViews = onSnapshot(
          viewsDocRef,
          (docSnapshot) => {
            setViews(docSnapshot.exists() ? docSnapshot.data().count : 0);
          },
          (err) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:", err);
          }
        );
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Firebase:", err);
        setError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.");
        setLoading(false);
      });

    return () => {
      if (unsubscribeSubmissions) unsubscribeSubmissions();
      if (unsubscribeViews) unsubscribeViews();
    };
  }, [authenticated, sortConfig]);

  // üóë –£–¥–∞–ª–µ–Ω–∏–µ
  const handleDelete = useCallback((id) => {
    setSubmissionToDelete(id);
    setShowDeleteModal(true);
  }, []);

  const confirmDelete = useCallback(async () => {
    const db = dbRef.current;
    if (!db || !submissionToDelete) return;
    try {
      // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "requests"
      await deleteDoc(doc(db, "requests", submissionToDelete));
      setShowDeleteModal(false);
      setSubmissionToDelete(null);
    } catch (err) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.");
      console.error(err);
    }
  }, [submissionToDelete]);

  // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  const handleUpdateStatus = useCallback(async (id, newStatus) => {
    const db = dbRef.current;
    if (!db) return;
    try {
      // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "requests"
      await updateDoc(doc(db, "requests", id), {
        status: newStatus,
      });
    } catch (err) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.");
      console.error(err);
    }
  }, []);

  // üîΩ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const handleSort = useCallback((key) => {
    setSortConfig((prevConfig) => ({
      key,
      direction:
        prevConfig.key === key && prevConfig.direction === "ascending"
          ? "descending"
          : "ascending",
    }));
    setCurrentPage(1);
  }, []);

  const getSortIcon = useCallback(
    (key) => {
      if (sortConfig.key !== key) {
        return <FaSort />;
      }
      if (sortConfig.direction === "ascending") {
        return <FaSortUp />;
      }
      return <FaSortDown />;
    },
    [sortConfig]
  );

  // üìÑ –ú–æ–¥–∞–ª–∫–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
  const handleRowClick = useCallback((submission) => {
    setSubmissionDetails(submission);
    setShowDetailsModal(true);
  }, []);

  // üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const exportToExcel = useCallback(() => {
    const dataToExport = submissions.map(({ id, createdAt, ...rest }) => ({
      ...rest,
      createdAt: formatFirestoreTimestamp(createdAt),
    }));
    const sheet = XLSX.utils.json_to_sheet(dataToExport);
    const book = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(book, sheet, "–ó–∞—è–≤–∫–∏");
    XLSX.writeFile(book, "submissions.xlsx");
  }, [submissions, formatFirestoreTimestamp]);

  // üîç –ü–æ–∏—Å–∫
  const filteredSubmissions = submissions.filter(
    ({ name, email, phone, message }) =>
      name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      phone?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      message?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // üìë –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const totalPages = Math.ceil(filteredSubmissions.length / itemsPerPage);
  const currentSubmissions = filteredSubmissions.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  // --- –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ ---
  if (!authenticated) {
    return (
      <main className="admin-login">
        <Helmet>
          <title>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî –ü—Ä–æ–º–ï–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤—ñ—Å</title>
        </Helmet>
        <h2>üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>
        <input
          type="password"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          onKeyDown={handleKeyDown}
          autoFocus
        />
        <button onClick={handleLogin} disabled={!password.trim()}>
          <FaSignInAlt /> –í–æ–π—Ç–∏
        </button>
        {error && <p className="error-text">{error}</p>}
      </main>
    );
  }

  // --- –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å ---
  return (
    <main className="admin-panel">
      <Helmet>
        <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî –ü—Ä–æ–º–ï–ª–µ–∫—Ç—Ä–æ–°–µ—Ä–≤—ñ—Å</title>
      </Helmet>
      <header className="admin-header">
        <h1>üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
        <div className="header-stats">
          {views !== null && (
            <p>
              üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π: <strong>{views}</strong>
            </p>
          )}
          <button onClick={handleLogout} className="logout-btn">
            <FaSignOutAlt /> –í—ã–π—Ç–∏
          </button>
        </div>
      </header>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="admin-controls">
        <div className="search-container">
          <input
            type="text"
            placeholder="üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º..."
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setCurrentPage(1);
            }}
            className="search-input"
          />
        </div>
        <div className="pagination-controls">
          <label htmlFor="itemsPerPage">–ó–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</label>
          <select
            id="itemsPerPage"
            value={itemsPerPage}
            onChange={(e) => {
              setItemsPerPage(Number(e.target.value));
              setCurrentPage(1);
            }}
          >
            <option value={10}>10</option>
            <option value={20}>20</option>
            <option value={50}>50</option>
            <option value={100}>100</option>
          </select>
        </div>
        {enableExport && submissions.length > 0 && (
          <button onClick={exportToExcel} className="export-btn">
            <FaDownload /> –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel
          </button>
        )}
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      {loading && <p className="loading-spinner">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>}
      {error && <p className="error-text">{error}</p>}

      {!loading && filteredSubmissions.length === 0 ? (
        <p className="no-data">
          {searchTerm ? "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É." : "–ù–µ—Ç –∑–∞—è–≤–æ–∫."}
        </p>
      ) : (
        <>
          <table className="admin-table">
            <thead>
              <tr>
                <th onClick={() => handleSort("name")}>
                  –ò–º—è {getSortIcon("name")}
                </th>
                <th onClick={() => handleSort("email")}>
                  Email {getSortIcon("email")}
                </th>
                <th onClick={() => handleSort("phone")}>
                  –¢–µ–ª–µ—Ñ–æ–Ω {getSortIcon("phone")}
                </th>
                <th>–°–æ–æ–±—â–µ–Ω–∏–µ</th>
                <th onClick={() => handleSort("status")}>
                  –°—Ç–∞—Ç—É—Å {getSortIcon("status")}
                </th>
                <th onClick={() => handleSort("createdAt")}>
                  –î–∞—Ç–∞ {getSortIcon("createdAt")}
                </th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {currentSubmissions.map(
                ({ id, name, email, phone, message, status = "new", createdAt }) => (
                  <tr key={id}>
                    <td>{name}</td>
                    <td>{email}</td>
                    <td>{phone}</td>
                    <td
                      className="message-cell"
                      onClick={() =>
                        handleRowClick({ id, name, email, phone, message, status, createdAt })
                      }
                      title="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
                    >
                      {message?.length > 50 ? `${message.substring(0, 50)}...` : message}
                    </td>
                    <td>
                      <select
                        value={status}
                        onChange={(e) => handleUpdateStatus(id, e.target.value)}
                        className={`status-select ${statusOptions[status]?.className}`}
                      >
                        {Object.entries(statusOptions).map(([key, value]) => (
                          <option key={key} value={key}>
                            {value.label}
                          </option>
                        ))}
                      </select>
                    </td>
                    <td>{formatFirestoreTimestamp(createdAt)}</td>
                    <td>
                      <button
                        onClick={() => handleDelete(id)}
                        className="delete-btn"
                      >
                        <FaTrash />
                      </button>
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
          <div className="pagination">
            <button
              onClick={() => setCurrentPage((prev) => prev - 1)}
              disabled={currentPage === 1}
            >
              –ü—Ä–µ–¥—ã–¥—É—â–∞—è
            </button>
            <span>
              –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
            </span>
            <button
              onClick={() => setCurrentPage((prev) => prev + 1)}
              disabled={currentPage === totalPages || totalPages === 0}
            >
              –°–ª–µ–¥—É—é—â–∞—è
            </button>
          </div>
        </>
      )}

      {/* –ú–æ–¥–∞–ª–∫–∏ */}
      {showDeleteModal && (
        <Modal
          title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
          message="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
          onConfirm={confirmDelete}
          onCancel={() => setShowDeleteModal(false)}
        />
      )}

      {showDetailsModal && submissionDetails && (
        <Modal
          title="–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"
          onCancel={() => setShowDetailsModal(false)}
        >
          <div className="submission-details">
            <p><strong>–ò–º—è:</strong> {submissionDetails.name}</p>
            <p><strong>Email:</strong> {submissionDetails.email}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {submissionDetails.phone}</p>
            <p>
              <strong>–°—Ç–∞—Ç—É—Å:</strong>{" "}
              <span className={`submission-status ${statusOptions[submissionDetails.status]?.className}`}>
                {statusOptions[submissionDetails.status]?.label || "‚Äî"}
              </span>
            </p>
            <p><strong>–î–∞—Ç–∞:</strong> {formatFirestoreTimestamp(submissionDetails.createdAt)}</p>
            <p className="submission-message"><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
            <p>{submissionDetails.message}</p>
          </div>
        </Modal>
      )}

      {/* –°—Å—ã–ª–∫–∞ –Ω–∞ Lighthouse */}
      <div className="extra-links">
        <a
          href="/report/index.html"
          target="_blank"
          rel="noopener noreferrer"
          className="report-link"
        >
          üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Lighthouse –æ—Ç—á–µ—Ç—ã
        </a>
      </div>
    </main>
  );
};

export default AdminPanel;